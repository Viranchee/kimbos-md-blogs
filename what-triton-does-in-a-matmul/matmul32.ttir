#loc = loc("home/tt_sqmatmul.py":16:0)
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("home/tt_sqmatmul.py":16:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("home/tt_sqmatmul.py":16:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("home/tt_sqmatmul.py":16:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("home/tt_sqmatmul.py":16:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<16xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<16xi32> loc(#loc5)
    %5 = tt.get_program_id y : i32 loc(#loc6)
    %6 = arith.muli %5, %c16_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<16xi32> loc(#loc8)
    %8 = arith.addi %7, %2 : tensor<16xi32> loc(#loc8)
    %9 = tt.expand_dims %4 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc9)
    %10 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc10)
    %11 = arith.muli %10, %9 : tensor<16x1xi32> loc(#loc10)
    %12 = tt.broadcast %11 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc11)
    %13 = tt.splat %arg3 : i32 -> tensor<16xi32> loc(#loc12)
    %14 = arith.cmpi slt, %4, %13 : tensor<16xi32> loc(#loc12)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi1> -> tensor<16x1xi1> loc(#loc13)
    %16 = tt.broadcast %15 : tensor<16x1xi1> -> tensor<16x16xi1> loc(#loc14)
    %17 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc15)
    %18 = tt.expand_dims %8 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc16)
    %19 = tt.broadcast %18 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc17)
    %20 = arith.cmpi slt, %8, %13 : tensor<16xi32> loc(#loc18)
    %21 = tt.expand_dims %20 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc19)
    %22 = tt.broadcast %21 : tensor<1x16xi1> -> tensor<16x16xi1> loc(#loc20)
    %23 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc21)
    %24 = scf.for %arg4 = %c0_i32 to %arg3 step %c16_i32 iter_args(%arg5 = %cst) -> (tensor<16x16xf32>)  : i32 {
      %43 = tt.splat %arg4 : i32 -> tensor<16xi32> loc(#loc23)
      %44 = arith.addi %43, %2 : tensor<16xi32> loc(#loc23)
      %45 = tt.expand_dims %44 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc24)
      %46 = tt.broadcast %45 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc11)
      %47 = arith.addi %12, %46 : tensor<16x16xi32> loc(#loc11)
      %48 = arith.cmpi slt, %44, %13 : tensor<16xi32> loc(#loc25)
      %49 = tt.expand_dims %48 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc26)
      %50 = tt.broadcast %49 : tensor<1x16xi1> -> tensor<16x16xi1> loc(#loc14)
      %51 = arith.andi %16, %50 : tensor<16x16xi1> loc(#loc14)
      %52 = tt.addptr %17, %47 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc15)
      %53 = tt.load %52, %51, %cst_0 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
      %54 = tt.expand_dims %44 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc28)
      %55 = arith.muli %10, %54 : tensor<16x1xi32> loc(#loc29)
      %56 = tt.broadcast %55 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc17)
      %57 = arith.addi %56, %19 : tensor<16x16xi32> loc(#loc17)
      %58 = tt.expand_dims %48 {axis = 1 : i32} : tensor<16xi1> -> tensor<16x1xi1> loc(#loc30)
      %59 = tt.broadcast %58 : tensor<16x1xi1> -> tensor<16x16xi1> loc(#loc20)
      %60 = arith.andi %59, %22 : tensor<16x16xi1> loc(#loc20)
      %61 = tt.addptr %23, %57 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc21)
      %62 = tt.load %61, %60, %cst_0 : tensor<16x16x!tt.ptr<f16>> loc(#loc31)
      %63 = tt.dot %53, %62, %arg5, inputPrecision = tf32 : tensor<16x16xf16> * tensor<16x16xf16> -> tensor<16x16xf32> loc(#loc32)
      scf.yield %63 : tensor<16x16xf32> loc(#loc33)
    } loc(#loc22)
    %25 = tt.expand_dims %4 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc34)
    %26 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc35)
    %27 = arith.muli %26, %25 : tensor<16x1xi32> loc(#loc35)
    %28 = tt.expand_dims %8 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc36)
    %29 = tt.broadcast %27 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc37)
    %30 = tt.broadcast %28 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc37)
    %31 = arith.addi %29, %30 : tensor<16x16xi32> loc(#loc37)
    %32 = tt.splat %arg3 : i32 -> tensor<16xi32> loc(#loc38)
    %33 = arith.cmpi slt, %4, %32 : tensor<16xi32> loc(#loc38)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<16xi1> -> tensor<16x1xi1> loc(#loc39)
    %35 = arith.cmpi slt, %8, %32 : tensor<16xi32> loc(#loc40)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc41)
    %37 = tt.broadcast %34 : tensor<16x1xi1> -> tensor<16x16xi1> loc(#loc42)
    %38 = tt.broadcast %36 : tensor<1x16xi1> -> tensor<16x16xi1> loc(#loc42)
    %39 = arith.andi %37, %38 : tensor<16x16xi1> loc(#loc42)
    %40 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %41 = tt.addptr %40, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc43)
    %42 = arith.truncf %24 : tensor<16x16xf32> to tensor<16x16xf16> loc(#loc44)
    tt.store %41, %42, %39 : tensor<16x16x!tt.ptr<f16>> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("home/tt_sqmatmul.py":17:35)
#loc3 = loc("home/tt_sqmatmul.py":17:21)
#loc4 = loc("home/tt_sqmatmul.py":17:53)
#loc5 = loc("home/tt_sqmatmul.py":17:40)
#loc6 = loc("home/tt_sqmatmul.py":18:35)
#loc7 = loc("home/tt_sqmatmul.py":18:21)
#loc8 = loc("home/tt_sqmatmul.py":18:40)
#loc9 = loc("home/tt_sqmatmul.py":25:36)
#loc10 = loc("home/tt_sqmatmul.py":25:27)
#loc11 = loc("home/tt_sqmatmul.py":25:47)
#loc12 = loc("home/tt_sqmatmul.py":26:33)
#loc13 = loc("home/tt_sqmatmul.py":26:36)
#loc14 = loc("home/tt_sqmatmul.py":26:47)
#loc15 = loc("home/tt_sqmatmul.py":27:28)
#loc16 = loc("home/tt_sqmatmul.py":29:56)
#loc17 = loc("home/tt_sqmatmul.py":29:47)
#loc18 = loc("home/tt_sqmatmul.py":30:59)
#loc19 = loc("home/tt_sqmatmul.py":30:62)
#loc20 = loc("home/tt_sqmatmul.py":30:47)
#loc21 = loc("home/tt_sqmatmul.py":31:28)
#loc22 = loc("home/tt_sqmatmul.py":22:28)
#loc23 = loc("home/tt_sqmatmul.py":23:23)
#loc24 = loc("home/tt_sqmatmul.py":25:56)
#loc25 = loc("home/tt_sqmatmul.py":26:59)
#loc26 = loc("home/tt_sqmatmul.py":26:62)
#loc27 = loc("home/tt_sqmatmul.py":27:54)
#loc28 = loc("home/tt_sqmatmul.py":29:36)
#loc29 = loc("home/tt_sqmatmul.py":29:27)
#loc30 = loc("home/tt_sqmatmul.py":30:36)
#loc31 = loc("home/tt_sqmatmul.py":31:54)
#loc32 = loc("home/tt_sqmatmul.py":33:22)
#loc33 = loc("home/tt_sqmatmul.py":33:8)
#loc34 = loc("home/tt_sqmatmul.py":35:32)
#loc35 = loc("home/tt_sqmatmul.py":35:23)
#loc36 = loc("home/tt_sqmatmul.py":35:52)
#loc37 = loc("home/tt_sqmatmul.py":35:43)
#loc38 = loc("home/tt_sqmatmul.py":36:29)
#loc39 = loc("home/tt_sqmatmul.py":36:32)
#loc40 = loc("home/tt_sqmatmul.py":36:55)
#loc41 = loc("home/tt_sqmatmul.py":36:58)
#loc42 = loc("home/tt_sqmatmul.py":36:43)
#loc43 = loc("home/tt_sqmatmul.py":37:21)
#loc44 = loc("home/tt_sqmatmul.py":37:38)
#loc45 = loc("home/tt_sqmatmul.py":37:4)
